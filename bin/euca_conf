#!/usr/bin/python

# Copyright 2011-2013 Eucalyptus Systems, Inc.
#
# Redistribution and use of this software in source and binary forms,
# with or without modification, are permitted provided that the following
# conditions are met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import argparse
from eucadmin.configfile import EucaConfigFile
from eucadmin.constants import *
import os

from pkg_resources import load_entry_point

cmd_map = {
           '--initialize': 'euca-initialize',
           '--heartbeat': 'euca-heartbeat',
           '--get-credentials': 'euca-get-credentials',
           '--setup': 'euca-setup',
           '--deregister-nodes': 'euca-deregister-nodes',
           '--deregister-arbitrator': 'euca-deregister-arbitrator',
           '--deregister-cloud': 'euca-deregister-cloud',
           '--deregister-cluster': 'euca-deregister-cluster',
           '--deregister-sc': 'euca-deregister-sc',
           '--deregister-walrus': 'euca-deregister-walrus',
           '--list-nodes': 'euca-describe-nodes',
           '--list-arbitrators': 'euca-describe-arbitrators',
           '--list-clouds': 'euca-describe-clouds',
           '--list-clusters': 'euca-describe-clusters',
           '--list-scs': 'euca-describe-storagecontrollers',
           '--list-walruses': 'euca-describe-walruses',
           '--register-nodes': 'euca-register-nodes',
           '--register-arbitrator': 'euca-register-arbitrators',
           '--register-cloud': 'euca-register-cloud',
           '--register-cluster': 'euca-register-cluster',
           '--register-sc': 'euca-register-storagecontroller',
           '--register-walrus': 'euca-register-walrus',
         }

def build_parser():
    parser = argparse.ArgumentParser(prog='euca_conf')
    parser.add_argument('-d', '--euca-home', dest='eucalyptus', 
                        default=os.environ.get('EUCALYPTUS', '/'))
    parser.add_argument('--instances', dest='instance_path')
    parser.add_argument('--hypervisor')
    parser.add_argument('--user', dest='euca_user')
    parser.add_argument('--dhcpd')
    parser.add_argument('--dhcp_user')
    parser.add_argument('--bridge', dest='vnet_bridge')
    return parser

if __name__ == "__main__":
    idx = 1
    while idx < len(sys.argv):
        if cmd_map.has_key(sys.argv[idx]):
            key = sys.argv.pop(idx)
            cmdname = cmd_map[key]
            print >>sys.stderr, ("Warning: euca_conf is deprecated."
                                 " Please use %s for this operation instead." % cmdname)
            sys.argv[0] = cmdname

            sys.exit(load_entry_point('eucadmin', 'console_scripts', cmdname))
        idx+=1

    """
    We will try to apply config changes if people really still
    want it and they haven't specified another command.

    Notably, this still breaks one command I've seen in the wild:
    euca_conf --setup --hypervisor { xen | kvm } --instances /some/path

    We can restore this functionality if needed.
    """

    parser = build_parser()
    args = parser.parse_args()
    config = EucaConfigFile(os.path.join(getattr(args, 'eucalyptus', '/'),
                            EUCA_CONF_FILE))
    for arg in [ 'hypervisor', 'euca_user', 'instance_path', 'dhcpd',
                 'dhcp_user',  'vnet_bridge']:
        if getattr(args, arg):
            config[arg.upper()] = getattr(args, arg)

    print >>sys.stderr, ("euca_conf is deprecated, and could not map this "
                         "request to a supported command.  Please consult "
                         "the documentation.")
